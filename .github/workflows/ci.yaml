name: Tupaia CI
on:
  push:
    branches:
      - '*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: '--max-old-space-size=6144'
  NODE_ENV: test

jobs:
  validate_branch_name:
    name: Validate branch name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate branch name
        run: packages/devops/scripts/ci/validateBranchName.sh

  validate_migration:
    name: Validate new migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate new migration
        run: packages/devops/scripts/ci/validateNewMigrations.sh

  #    - TODO: use eslint no-exclusive-tests flag at lint step after RN-201
  validate_tests:
    name: Validate unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.19.3
          cache: yarn
      - run: yarn set version 3.2.4
      - run: SKIP_BUILD_INTERNAL_DEPENDENCIES=true yarn install --frozen-lockfile
      - run: yarn workspace @tupaia/utils build # /scripts/node/validateTests.js use utils package

      - name: Validate unit tests
        run: packages/devops/scripts/ci/validateTests.sh

  tests_internal_dependencies:
    name: Test internal dependencies
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:13-3.2
        env:
          POSTGRES_PASSWORD: opensesame
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.19.3
          cache: yarn
      - run: yarn set version 3.2.4

      - name: Install LastPass CLI
        run: |
          sudo apt-get upgrade -y
          sudo apt-get install -y lastpass-cli
      - name: Login to LastPass
        run: echo ${{ secrets.LASTPASS_PASSWORD }} | LPASS_DISABLE_PINENTRY=1 lpass login ${{ secrets.LASTPASS_USERNAME }}
      - name: Pull secrets from LastPass and save as environment variables
        run: lpass show --notes "GitHub Action .env Environment Variables" >> $GITHUB_ENV
      - name: Logout of LastPass
        run: lpass logout --force

      - name: Install dependencies
        run: SKIP_BUILD_INTERNAL_DEPENDENCIES=true yarn install --frozen-lockfile
      - name: Build internal dependencies
        run: yarn build:internal-dependencies
      - name: Test internal dependencies
        run: ./packages/devops/scripts/ci/testInternalDependencies.sh

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - admin-panel-server
          - central-server
          - data-table-server
          - entity-server
          - lesmis-server
          - meditrak-app-server
          - psss-server
          - report-server
          - web-config-server
          - auth
          - data-api
          - data-lake-api
          - database
          - indicators
          - web-frontend

    services:
      postgres:
        image: postgis/postgis:13-3.2
        env:
          POSTGRES_PASSWORD: opensesame
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.19.3
          cache: yarn
      - run: yarn set version 3.2.4

      - name: Install LastPass CLI
        run: |
          sudo apt-get upgrade -y
          sudo apt-get install -y lastpass-cli
      - name: Login to LastPass
        run: echo ${{ secrets.LASTPASS_PASSWORD }} | LPASS_DISABLE_PINENTRY=1 lpass login ${{ secrets.LASTPASS_USERNAME }}
      - name: Pull secrets from LastPass and save as environment variables
        run: lpass show --notes "GitHub Action .env Environment Variables" >> $GITHUB_ENV
      - name: Logout of LastPass
        run: lpass logout --force

      - run: SKIP_BUILD_INTERNAL_DEPENDENCIES=true yarn install --frozen-lockfile
      - name: Build internal dependencies
        run: yarn build:internal-dependencies
      - name: Testing ${{ matrix.package }}
        run: ./packages/devops/scripts/ci/testBackend.sh {{ matrix.package }}
