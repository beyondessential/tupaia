#!/bin/bash

# Convert the env files generated by the downloadEnv container into js objects.
# Run by the frontend container prior to nginx startup
tupaia_env_dir=${TUPAIA_ENV_DIR:-/env/packages}
tupaia_package_dir=${TUPAIA_PACKAGE_DIR:-/home/ubuntu/tupaia/packages}

function env-js() {
    # Read $1 and write to $2 as a js object `window._env__`
    # Adapted from
    # https://www.freecodecamp.org/news/how-to-implement-runtime-environment-variables-with-create-react-app-docker-and-nginx-7f9d42a91d70
    env_src=$1
    env_js=$2

    echo "window.env = {" > "$env_js"
    # Read each line in .env file. Each line represents key=value pairs
    while read -r line || [[ -n "$line" ]]; do
      # Split env variables by character `=`
      if printf '%s\n' "$line" | grep -q -e '='; then
        varname=$(printf '%s\n' "$line" | sed -e 's/=.*//')
        varvalue=$(printf '%s\n' "$line" | sed -e 's/^[^=]*=//')
      fi

      # Read value of current variable if exists as Environment variable
      # otherwise use value from .env file
      value=${!varname:-$varvalue}
      # Append configuration property to JS file
      echo "  $varname: \"$value\"," >> "$env_js"
    done < "$env_src"

    echo "}" >> "$env_js"
}


for p in "$tupaia_package_dir"/*; do
    package=$(basename "$p")
    if [ -f "$tupaia_env_dir/$package/.env" ]; then
        echo  "creating $p/.env-config.js"
        if [[ $package == "web-frontend" ]]; then
            # web frontend serves different bundles for desktop and mobile
            env-js "$tupaia_env_dir/$package/.env" "$p/build/mobile/.env-config.js"
            env-js "$tupaia_env_dir/$package/.env" "$p/build/desktop/.env-config.js"
        else
            env-js "$tupaia_env_dir/$package/.env" "$p/build/.env-config.js"
        fi
    fi
done
