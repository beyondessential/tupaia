# In setting up these services, I have tried to minimise how much is loaded into each container for
# each step in order to speed up those individual step build + run times
# - 'validation' service includes a nodejs container, plus the full repo code, and any node_modules
#   dependencies for the package in question
# - 'testing' service is the same as the validation service, but additionally depends on the db
#   service (see below)
# - the db service provides a postgres db with postgis (and takes a little while to run, thus the
#   splitting of the above services so validation isn't slower than it should be)
# - the deployment service just uses the base alpine image + ssh to log into
#   an ec2 instance and deploy the latest version of the code for each package

validation:
  build:
    dockerfile: full-testable-package.Dockerfile
  cached: true
  encrypted_dockercfg_path: dockercfg.encrypted
  default_cache_branch: 'dev'

testing:
  build:
    dockerfile: full-testable-package.Dockerfile
  depends_on:
    - db
  encrypted_env_file: ./ci-env-vars.encrypted # all individual .env files combined and encrypted
  cached: true
  encrypted_dockercfg_path: dockercfg.encrypted
  default_cache_branch: 'dev'

db:
  image: mdillon/postgis:9.6-alpine
  cached: true
  encrypted_dockercfg_path: dockercfg.encrypted

deployment:
  build:
    dockerfile: deploy-only.Dockerfile
  encrypted_env_file: ./ci-env-vars.encrypted
  volumes:
    # mapping to `.ssh` directory ensures that `id_rsa` file persists to subsequent steps
    - ./.ssh:/root/.ssh
  cached: true
  encrypted_dockercfg_path: dockercfg.encrypted
  default_cache_branch: 'dev'
