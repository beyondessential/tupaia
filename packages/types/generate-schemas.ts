import { resolve } from 'path';
import * as fs from 'fs';
import * as TJS from 'typescript-json-schema';

// @ts-ignore
import config from './config/schemas/config.json';

const failOnChanges = process.argv[2] === '--failOnChanges';

const settings: TJS.PartialArgs = {
  ref: false,
  required: true,
  ignoreErrors: true,
  noExtraProps: true,
};

const HEADER = `/*
 * Tupaia
 * Copyright (c) 2017 - 2020 Beyond Essential Systems Pty Ltd
 *
 */

/* 
 * This file was generated by a tool.
 * Rerun generate:schemas to regenerate this file.
 */
`;

const { filename, typesPath } = config as any;

const program = TJS.getProgramFromFiles([resolve(typesPath)]);
const schemas = TJS.generateSchema(program, '*', settings);

if (schemas?.definitions) {
  let fileContents = HEADER;

  Object.entries(schemas.definitions || {}).forEach(([typeName, schema]) => {
    if (typeof schema !== 'boolean') {
      const finalisedSchema = `export const ${typeName}Schema = ${JSON.stringify(
        schema,
        null,
        '\t',
      )} \n\n`;
      fileContents += finalisedSchema;
    }
  });

  if (failOnChanges) {
    const currentFileContents = fs.readFileSync(filename, { encoding: 'utf8' });
    if (currentFileContents !== fileContents) {
      console.log('‚ùå There are changes in the types which are not reflected in the json schema.');
      console.log("Run 'yarn workspace @tupaia/types generate' to fix");
      process.exit(1);
    }
  }

  fs.writeFileSync(filename, fileContents);
  console.log(`Created file: ${filename}`);
}
