/*
 * Tupaia
 * Copyright (c) 2017 - 2020 Beyond Essential Systems Pty Ltd
 *
 */
/*
 * This file was generated by a tool.
 * Rerun generate:models to recreate this file.
 */
import { ReportConfig } from './models-extra';
import { DashboardItemConfig } from './models-extra';

export { StandardOrCustomReportConfig } from './models-extra';

export interface AccessRequest {
  'approved'?: boolean | null;
  'created_time'?: Date;
  'entity_id'?: string | null;
  'id': string;
  'message'?: string | null;
  'note'?: string | null;
  'permission_group_id'?: string | null;
  'processed_by'?: string | null;
  'processed_date'?: Date | null;
  'project_id'?: string | null;
  'user_id'?: string | null;
}
export interface AdminPanelSession {
  'access_policy': any;
  'access_token': string;
  'access_token_expiry': string;
  'email': string;
  'id': string;
  'refresh_token': string;
}
export interface Analytics {
  'answer_entity_m_row$'?: string | null;
  'answer_m_row$'?: string | null;
  'data_element_code'?: string | null;
  'data_element_m_row$'?: string | null;
  'data_group_code'?: string | null;
  'date'?: Date | null;
  'day_period'?: string | null;
  'entity_code'?: string | null;
  'entity_m_row$'?: string | null;
  'entity_name'?: string | null;
  'event_id'?: string | null;
  'month_period'?: string | null;
  'question_m_row$'?: string | null;
  'survey_m_row$'?: string | null;
  'survey_response_m_row$'?: string | null;
  'type'?: string | null;
  'value'?: string | null;
  'week_period'?: string | null;
  'year_period'?: string | null;
}
export interface AncestorDescendantRelation {
  'ancestor_id': string;
  'descendant_id': string;
  'entity_hierarchy_id': string;
  'generational_distance': number;
  'id': string;
}
export interface Answer {
  'id': string;
  'm_row$'?: string;
  'question_id': string;
  'survey_response_id': string;
  'text'?: string | null;
  'type': string;
}
export interface ApiClient {
  'id': string;
  'secret_key_hash': string;
  'user_account_id'?: string | null;
  'username': string;
}
export interface ApiRequestLog {
  'api': string;
  'endpoint': string;
  'id': string;
  'metadata'?: any | null;
  'method'?: string | null;
  'query'?: any | null;
  'refresh_token'?: string | null;
  'request_time'?: Date | null;
  'user_id'?: string | null;
  'version': number;
}
export interface Clinic {
  'category_code'?: string | null;
  'code': string;
  'country_id': string;
  'geographical_area_id': string;
  'id': string;
  'name': string;
  'type'?: string | null;
  'type_name'?: string | null;
}
export interface Comment {
  'created_time'?: Date;
  'id': string;
  'last_modified_time'?: Date;
  'text': string;
  'user_id'?: string | null;
}
export interface Country {
  'code': string;
  'id': string;
  'name': string;
}
export interface Dashboard {
  'code': string;
  'id': string;
  'name': string;
  'root_entity_code': string;
  'sort_order'?: number | null;
}
export interface DashboardItem {
  'code': string;
  'config'?: DashboardItemConfig;
  'id': string;
  'legacy'?: boolean;
  'permission_group_ids'?: string[] | null;
  'report_code'?: string | null;
}
export interface DashboardRelation {
  'child_id': string;
  'dashboard_id': string;
  'entity_types': any;
  'id': string;
  'permission_groups': string[];
  'project_codes': string[];
  'sort_order'?: number | null;
}
export interface DataElement {
  'code': string;
  'config'?: any;
  'id': string;
  'm_row$'?: string;
  'permission_groups'?: string[];
  'service_type': ServiceType;
}
export interface DataElementDataGroup {
  'data_element_id': string;
  'data_group_id': string;
  'id': string;
}
export interface DataElementDataService {
  'country_code': string;
  'data_element_code': string;
  'id': string;
  'service_config'?: any;
  'service_type': ServiceType;
}
export interface DataGroup {
  'code': string;
  'config'?: any;
  'id': string;
  'service_type': ServiceType;
}
export interface DataServiceEntity {
  'config': any;
  'entity_code': string;
  'id': string;
}
export interface DataServiceSyncGroup {
  'code': string;
  'config': any;
  'data_group_code': string;
  'id': string;
  'service_type': ServiceType;
  'sync_cursor'?: string | null;
  'sync_status'?: SyncGroupSyncStatus | null;
}
export interface DataTable {
  'code': string;
  'config'?: any;
  'description'?: string | null;
  'id': string;
  'permission_groups': string[];
  'type': DataTableType;
}
export interface DhisInstance {
  'code': string;
  'config': any;
  'id': string;
  'readonly': boolean;
}
export interface DhisSyncLog {
  'data'?: string | null;
  'deleted'?: number | null;
  'dhis_reference'?: string | null;
  'error_list'?: string | null;
  'id': string;
  'ignored'?: number | null;
  'imported'?: number | null;
  'record_id': string;
  'record_type': string;
  'updated'?: number | null;
}
export interface DhisSyncQueue {
  'bad_request_count'?: number | null;
  'change_time'?: number | null;
  'details'?: string | null;
  'id': string;
  'is_dead_letter'?: boolean | null;
  'is_deleted'?: boolean | null;
  'priority'?: number | null;
  'record_id': string;
  'record_type': string;
  'type': string;
}
export interface Disaster {
  'countryCode': string;
  'description'?: string | null;
  'id': string;
  'name': string;
  'type': DisasterType;
}
export interface DisasterEvent {
  'date': Date;
  'disasterId': string;
  'id': string;
  'organisationUnitCode': string;
  'type': DisasterEventType;
}
export interface Entity {
  'attributes'?: any | null;
  'bounds'?: any | null;
  'code': string;
  'country_code'?: string | null;
  'id': string;
  'image_url'?: string | null;
  'm_row$'?: string;
  'metadata'?: any | null;
  'name': string;
  'parent_id'?: string | null;
  'point'?: any | null;
  'region'?: any | null;
  'type'?: EntityType | null;
}
export interface EntityHierarchy {
  'canonical_types'?: string[] | null;
  'id': string;
  'name': string;
}
export interface EntityRelation {
  'child_id': string;
  'entity_hierarchy_id': string;
  'id': string;
  'parent_id': string;
}
export interface ErrorLog {
  'api_request_log_id'?: string | null;
  'error_time'?: Date | null;
  'id': string;
  'message'?: string | null;
  'type'?: string | null;
}
export interface ExternalDatabaseConnection {
  'code': string;
  'description'?: string | null;
  'id': string;
  'name': string;
  'permission_groups'?: string[];
}
export interface FeedItem {
  'country_id'?: string | null;
  'creation_date'?: Date | null;
  'geographical_area_id'?: string | null;
  'id': string;
  'permission_group_id'?: string | null;
  'record_id'?: string | null;
  'template_variables'?: Object | null;
  'type'?: string | null;
  'user_id'?: string | null;
}
export interface GeographicalArea {
  'code'?: string | null;
  'country_id': string;
  'id': string;
  'level_code': string;
  'level_name': string;
  'name': string;
  'parent_id'?: string | null;
}
export interface Indicator {
  'builder': string;
  'code': string;
  'config'?: any;
  'id': string;
}
export interface LegacyReport {
  'code': string;
  'data_builder'?: string | null;
  'data_builder_config'?: any | null;
  'data_services'?: any | null;
  'id': string;
}
export interface LesmisSession {
  'access_policy': any;
  'access_token': string;
  'access_token_expiry': string;
  'email': string;
  'id': string;
  'refresh_token': string;
}
export interface MapOverlay {
  'code': string;
  'config'?: any;
  'country_codes'?: string[] | null;
  'data_services'?: any | null;
  'id'?: string;
  'legacy'?: boolean;
  'linked_measures'?: string[] | null;
  'name': string;
  'permission_group': string;
  'project_codes'?: string[] | null;
  'report_code'?: string | null;
}
export interface MapOverlayGroup {
  'code': string;
  'id': string;
  'name': string;
}
export interface MapOverlayGroupRelation {
  'child_id': string;
  'child_type': string;
  'id': string;
  'map_overlay_group_id': string;
  'sort_order'?: number | null;
}
export interface MeditrakDevice {
  'app_version'?: string | null;
  'config'?: any | null;
  'id': string;
  'install_id': string;
  'platform'?: string | null;
  'user_id': string;
}
export interface MeditrakSyncQueue {
  'change_time'?: number | null;
  'id': string;
  'record_id': string;
  'record_type': string;
  'type': string;
}
export interface Ms1SyncLog {
  'count'?: number | null;
  'data'?: string | null;
  'endpoint'?: string | null;
  'error_list'?: string | null;
  'id': string;
  'record_id': string;
  'record_type': string;
}
export interface Ms1SyncQueue {
  'bad_request_count'?: number | null;
  'change_time'?: number | null;
  'details'?: string | null;
  'id': string;
  'is_dead_letter'?: boolean | null;
  'is_deleted'?: boolean | null;
  'priority'?: number | null;
  'record_id': string;
  'record_type': string;
  'type': string;
}
export interface OneTimeLogin {
  'creation_date'?: Date | null;
  'id': string;
  'token': string;
  'use_date'?: Date | null;
  'user_id': string;
}
export interface Option {
  'attributes'?: any | null;
  'id': string;
  'label'?: string | null;
  'option_set_id': string;
  'sort_order'?: number | null;
  'value': string;
}
export interface OptionSet {
  'id': string;
  'name': string;
}
export interface PermissionGroup {
  'id': string;
  'name': string;
  'parent_id'?: string | null;
}
export interface PermissionsBasedMeditrakSyncQueue {
  'change_time'?: number | null;
  'country_ids'?: string[] | null;
  'entity_type'?: EntityType | null;
  'id'?: string | null;
  'permission_groups'?: string[] | null;
  'record_id'?: string | null;
  'record_type'?: string | null;
  'type'?: string | null;
}
export interface Project {
  'code': string;
  'config'?: any | null;
  'dashboard_group_name'?: string | null;
  'default_measure'?: string | null;
  'description'?: string | null;
  'entity_hierarchy_id'?: string | null;
  'entity_id'?: string | null;
  'id': string;
  'image_url'?: string | null;
  'logo_url'?: string | null;
  'permission_groups'?: string[] | null;
  'sort_order'?: number | null;
}
export interface PsssSession {
  'access_policy': any;
  'access_token': string;
  'access_token_expiry': string;
  'email': string;
  'id': string;
  'refresh_token': string;
}
export interface Question {
  'code'?: string | null;
  'data_element_id'?: string | null;
  'detail'?: string | null;
  'hook'?: string | null;
  'id': string;
  'm_row$'?: string;
  'name'?: string | null;
  'option_set_id'?: string | null;
  'options'?: string[] | null;
  'text': string;
  'type': string;
}
export interface RefreshToken {
  'device'?: string | null;
  'expiry'?: number | null;
  'id': string;
  'meditrak_device_id'?: string | null;
  'token': string;
  'user_id': string;
}
export interface Report {
  'code': string;
  'config': ReportConfig;
  'id': string;
  'permission_group_id': string;
}
export interface Setting {
  'id': string;
  'key': string;
  'value'?: string | null;
}
export interface SupersetInstance {
  'code': string;
  'config': any;
  'id': string;
}
export interface Survey {
  'can_repeat'?: boolean | null;
  'code': string;
  'country_ids'?: string[] | null;
  'data_group_id'?: string | null;
  'id': string;
  'integration_metadata'?: any | null;
  'm_row$'?: string;
  'name': string;
  'period_granularity'?: PeriodGranularity | null;
  'permission_group_id'?: string | null;
  'requires_approval'?: boolean | null;
  'survey_group_id'?: string | null;
}
export interface SurveyGroup {
  'id': string;
  'name': string;
}
export interface SurveyResponse {
  'approval_status'?: ApprovalStatus | null;
  'assessor_name': string;
  'data_time'?: Date | null;
  'end_time': Date;
  'entity_id': string;
  'id': string;
  'm_row$'?: string;
  'metadata'?: string | null;
  'outdated'?: boolean | null;
  'start_time': Date;
  'survey_id': string;
  'timezone'?: string | null;
  'user_id': string;
}
export interface SurveyResponseComment {
  'comment_id': string;
  'id': string;
  'survey_response_id': string;
}
export interface SurveyScreen {
  'id': string;
  'screen_number': number;
  'survey_id': string;
}
export interface SurveyScreenComponent {
  'answers_enabling_follow_up'?: string[] | null;
  'component_number': number;
  'config'?: string | null;
  'detail_label'?: string | null;
  'id': string;
  'is_follow_up'?: boolean | null;
  'question_id': string;
  'question_label'?: string | null;
  'screen_id': string;
  'validation_criteria'?: string | null;
  'visibility_criteria'?: string | null;
}
export interface SyncGroupLog {
  'id': string;
  'log_message': string;
  'service_type': ServiceType;
  'sync_group_code': string;
  'timestamp'?: Date | null;
}
export interface UserAccount {
  'creation_date'?: Date | null;
  'email': string;
  'employer'?: string | null;
  'first_name'?: string | null;
  'gender'?: string | null;
  'id': string;
  'last_name'?: string | null;
  'mobile_number'?: string | null;
  'password_hash': string;
  'password_salt': string;
  'position'?: string | null;
  'primary_platform'?: PrimaryPlatform | null;
  'profile_image'?: string | null;
  'verified_email'?: VerifiedEmail | null;
}
export interface UserEntityPermission {
  'entity_id'?: string | null;
  'id': string;
  'permission_group_id'?: string | null;
  'user_id'?: string | null;
}
export interface UserFavouriteDashboardItem {
  'dashboard_item_id': string;
  'id': string;
  'user_id': string;
}
export interface UserSession {
  'access_token_expiry'?: string;
  'accessPolicy'?: any | null;
  'accessToken'?: string | null;
  'id': string;
  'refreshToken': string;
  'userName': string;
}
export enum VerifiedEmail {
  'unverified' = 'unverified',
  'new_user' = 'new_user',
  'verified' = 'verified',
}
export enum SyncGroupSyncStatus {
  'IDLE' = 'IDLE',
  'SYNCING' = 'SYNCING',
  'ERROR' = 'ERROR',
}
export enum ServiceType {
  'dhis' = 'dhis',
  'tupaia' = 'tupaia',
  'indicator' = 'indicator',
  'weather' = 'weather',
  'kobo' = 'kobo',
  'data-lake' = 'data-lake',
  'superset' = 'superset',
}
export enum PrimaryPlatform {
  'tupaia' = 'tupaia',
  'lesmis' = 'lesmis',
}
export enum PeriodGranularity {
  'yearly' = 'yearly',
  'quarterly' = 'quarterly',
  'monthly' = 'monthly',
  'weekly' = 'weekly',
  'daily' = 'daily',
}
export enum EntityType {
  'world' = 'world',
  'project' = 'project',
  'country' = 'country',
  'district' = 'district',
  'sub_district' = 'sub_district',
  'facility' = 'facility',
  'village' = 'village',
  'case' = 'case',
  'case_contact' = 'case_contact',
  'disaster' = 'disaster',
  'school' = 'school',
  'catchment' = 'catchment',
  'sub_catchment' = 'sub_catchment',
  'field_station' = 'field_station',
  'city' = 'city',
  'individual' = 'individual',
  'sub_facility' = 'sub_facility',
  'postcode' = 'postcode',
  'household' = 'household',
  'larval_habitat' = 'larval_habitat',
  'local_government' = 'local_government',
  'medical_area' = 'medical_area',
  'nursing_zone' = 'nursing_zone',
  'fetp_graduate' = 'fetp_graduate',
  'incident' = 'incident',
  'incident_reported' = 'incident_reported',
  'fiji_aspen_facility' = 'fiji_aspen_facility',
  'wish_sub_district' = 'wish_sub_district',
  'trap' = 'trap',
  'asset' = 'asset',
  'institute' = 'institute',
  'msupply_store' = 'msupply_store',
  'complaint' = 'complaint',
  'water_sample' = 'water_sample',
}
export enum DisasterType {
  'cyclone' = 'cyclone',
  'eruption' = 'eruption',
  'earthquake' = 'earthquake',
  'tsunami' = 'tsunami',
  'flood' = 'flood',
}
export enum DisasterEventType {
  'start' = 'start',
  'end' = 'end',
  'resolve' = 'resolve',
}
export enum DataTableType {
  'analytics' = 'analytics',
  'events' = 'events',
  'entity_relations' = 'entity_relations',
  'entities' = 'entities',
  'sql' = 'sql',
  'data_group_metadata' = 'data_group_metadata',
  'data_element_metadata' = 'data_element_metadata',
  'entity_attributes' = 'entity_attributes',
}
export enum DataSourceType {
  'dataElement' = 'dataElement',
  'dataGroup' = 'dataGroup',
}
export enum ApprovalStatus {
  'not_required' = 'not_required',
  'pending' = 'pending',
  'rejected' = 'rejected',
  'approved' = 'approved',
}
