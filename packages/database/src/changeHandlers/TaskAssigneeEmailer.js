import { sendEmail } from '@tupaia/server-utils';
import { assertIsNotNullish } from '@tupaia/tsutils';
import { requireEnv } from '@tupaia/utils';
import { ChangeHandler } from './ChangeHandler';

export class TaskAssigneeEmailer extends ChangeHandler {
  constructor(models) {
    super(models, 'task-assignee-emailer');

    this.changeTranslators = {
      task: change => this.getUpdatedTasks(change),
    };
  }

  getUpdatedTasks(changeDetails) {
    const { type, new_record: newRecord, old_record: oldRecord } = changeDetails;

    // only interested in updates where the assignee has changed
    if (
      type !== 'update' ||
      !newRecord.assignee_id ||
      (oldRecord && oldRecord.assignee_id === newRecord.assignee_id) ||
      // ignore tasks that are autogenerated from completed repeating tasks
      (!oldRecord && newRecord.status === 'completed')
    ) {
      return [];
    }

    return [newRecord];
  }

  async handleChanges(models, changedTasks) {
    // if there are no changed tasks, we don't need to do anything
    if (changedTasks.length === 0) return;

    for (const task of changedTasks) {
      const { assignee_id: assigneeId, entity_id: entityId, id, survey_id: surveyId } = task;

      const [survey, assignee, entity] = await Promise.all([
        models.survey.findById(surveyId),
        models.user.findById(assigneeId),
        models.entity.findById(entityId),
      ]);
      assertIsNotNullish(survey, `No survey found with ID ${surveyId}`);
      assertIsNotNullish(assignee, `No user found with ID ${assigneeId}`);
      assertIsNotNullish(entity, `No entity found with ID ${entityId}`);

      const datatrakURL = requireEnv('DATATRAK_FRONT_END_URL');

      await sendEmail(assignee.email, {
        subject: 'Tupaia DataTrak Task Assigned',
        templateName: 'taskAssigned',
        templateContext: {
          title: 'You have been assigned a new task',
          userName: assignee.first_name,
          entityName: entity.name,
          surveyName: survey.name,
          cta: {
            url: `${datatrakURL}/tasks/${id}`,
            text: 'View task',
          },
        },
      });
    }
  }
}
