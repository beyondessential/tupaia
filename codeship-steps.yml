- type: parallel
  name: validate-and-test
  steps:
    - type: parallel
      name: validate
      steps:
        - name: validate branch name
          service: validation
          command: './packages/devops/scripts/ci/validateBranchName.sh'
        - type: parallel
          name: validate all code
          steps:
            - name: validate meditrak-server code
              service: validation
              command: './packages/devops/scripts/ci/validateCode.sh meditrak-server'
            - name: validate web-config-server code
              service: validation
              command: './packages/devops/scripts/ci/validateCode.sh web-config-server'
    - type: serial
      name: test
      steps:
        - type: parallel # they're in containers, so even though they generally use one db, they're sandboxed
          name: test-all
          steps:
            - name: test-meditrak-server
              service: testing
              command: './packages/devops/scripts/ci/testBackend.sh meditrak-server'
            - name: test-web-config-server
              service: testing
              command: './packages/devops/scripts/ci/testBackend.sh web-config-server'
            - name: test-database
              service: testing
              command: './packages/devops/scripts/ci/testBackend.sh database'
            - name: test-data-api
              service: testing
              command: './packages/devops/scripts/ci/testBackend.sh data-api'
            - name: test-auth
              service: testing
              command: './packages/devops/scripts/ci/testBackend.sh auth'
            - name: test-internal-dependencies
              service: testing
              command: './packages/devops/scripts/ci/testInternalDependencies.sh'

- type: serial
  name: pull latest into ec2
  service: deployment
  steps:
    - name: reinstate SSH Private Key File
      command: /bin/bash -c "echo -e $PRIVATE_SSH_KEY >> /root/.ssh/id_rsa"
    - name: chmod id_rsa
      command: chmod 600 /root/.ssh/id_rsa
    - name: pull latest and install dependencies
      command: './packages/devops/scripts/ci/pullLatest.sh'
- type: serial
  name: deploy-all
  service: deployment
  steps:
    - type: serial
      name: deploy-backends
      steps:
        - type: serial
          name: restart-backends
          steps:
            - name: deploy-web-config-server
              command: './packages/devops/scripts/ci/deployBackend.sh web-config-server'
            - name: deploy-meditrak-server
              command: './packages/devops/scripts/ci/deployBackend.sh meditrak-server'
        # run migrations immediately after backend deployment has finished so there is minimal time for code/db mismatch
        - name: run db migrations
          command: './packages/devops/scripts/ci/runMigrations.sh'
    # build front ends in serial because they consume a lot of resources, and can crash deployment if run in parallel
    - type: serial
      name: deploy-frontends
      steps:
        - name: deploy-web-frontend
          command: './packages/devops/scripts/ci/deployFrontend.sh web-frontend'
        - name: deploy-admin-panel
          command: './packages/devops/scripts/ci/deployFrontend.sh admin-panel'
        - name: deploy-psss
          command: './packages/devops/scripts/ci/deployFrontend.sh psss'
